A short write-up covering:

Design tradeoffs (e.g., model choice, security vs. speed)

How you'd scale the prototype (e.g., caching, on-chain/off-chain components)

Risks of LLM-generated code in blockchain contexts

Requirements
Use an LLM (OpenAI, Hugging Face, or an open-source model like Mistral)

Implement guardrails to avoid insecure code generation

Provide either a CLI or a simple web interface

Task 1: Natural Language to Smart Contract Logic
Problem: Developers struggle to translate requirements into Solidity.

Your Goal:
Build a tool that:

Takes natural language input (e.g., "Create an ERC-20 token with minting restricted to addresses in an allowlist")

Uses an LLM to generate secure, minimal Solidity code

Outputs a brief explanation of key security considerations
(e.g., "Avoided public mint function; used modifier for allowlist checks")